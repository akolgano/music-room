# api.yaml
openapi: 3.0.3
info:
  title: Music Room API
  description: API documentation for Music Room - A collaborative music playlist application
  version: v1
  contact:
    name: Music Room API Support
servers:
  - url: http://127.0.0.1:8000
    description: Development server
  - url: https://your-production-domain.com
    description: Production server
security:
  - TokenAuth: []
paths:
  /users/signup/:
    post:
      tags:
        - Users
      summary: User signup
      description: Register a new user account with email OTP verification
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - password
                - username
              properties:
                otp:
                  type: string
                  description: One-time passcode sent to email
                username:
                  type: string
                  description: User username
                email:
                  type: string
                  format: email
                  description: Email address used for signup
                password:
                  type: string
                  format: password
                  description: User password
                  minLength: 8
      responses:
        '201':
          description: Signup successful, returns token and user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Signup failed due to validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Signup failed due to error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/login/:
    post:
      tags:
        - Users
      summary: User login
      description: Authenticate user and return token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful, returns token and user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found or invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/logout/:
    post:
      tags:
        - Users
      summary: User logout
      description: Logout user and invalidate token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: string
                example: "Logout successfully"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Logout failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/signup_email_otp/:
    post:
      tags:
        - Users
      summary: Send signup OTP to email
      description: Send one-time passcode to email for signup verification
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '201':
          description: Signup OTP sent to email successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
        '400':
          description: Signup OTP sending failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/forgot_password/:
    post:
      tags:
        - Users
      summary: Forgot password - send OTP
      description: Send OTP to email for password reset
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '201':
          description: OTP sent to email successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
                    format: email
        '400':
          description: Failed to send OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/forgot_change_password/:
    post:
      tags:
        - Users
      summary: Forgot password - change password
      description: Change password using OTP verification
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - password
              properties:
                otp:
                  type: string
                  description: One-time passcode sent to email
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  minLength: 8
      responses:
        '201':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
                    format: email
        '400':
          description: Password change failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/user_password_change/:
    post:
      tags:
        - Users
      summary: Change password (authenticated user)
      description: Change password for authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - current_password
                - new_password
              properties:
                current_password:
                  type: string
                  format: password
                new_password:
                  type: string
                  format: password
                  minLength: 8
      responses:
        '201':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
                    format: email
        '400':
          description: Password change failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/get_user/:
    get:
      tags:
        - Users
      summary: Get authenticated user details
      description: Get current user information including social account details
      responses:
        '200':
          description: User info retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  id:
                    type: integer
                  email:
                    type: string
                    format: email
                  has_social_account:
                    type: boolean
                  is_password_usable:
                    type: boolean
                  social:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [facebook, google]
                      social_id:
                        type: string
                      social_email:
                        type: string
                      social_name:
                        type: string
        '400':
          description: Failed to get user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/get_friends/:
    get:
      tags:
        - Users
      summary: Get friends list
      description: Get list of user's friends
      responses:
        '200':
          description: Friends list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  friends:
                    type: array
                    items:
                      type: integer
                    description: Array of friend user IDs
        '400':
          description: Failed to get friends list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/send_friend_request/{user_id}/:
    post:
      tags:
        - Users
      summary: Send friend request
      description: Send a friend request to another user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of user to send friend request to
      responses:
        '200':
          description: Friend request sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  friend_id:
                    type: integer
                  friendship_id:
                    type: integer
        '400':
          description: Failed to send friend request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/accept_friend_request/{friendship_id}/:
    post:
      tags:
        - Users
      summary: Accept friend request
      description: Accept a pending friend request
      parameters:
        - name: friendship_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of friendship to accept
      responses:
        '200':
          description: Friend request accepted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /users/reject_friend_request/{friendship_id}/:
    post:
      tags:
        - Users
      summary: Reject friend request
      description: Reject a pending friend request
      parameters:
        - name: friendship_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of friendship to reject
      responses:
        '200':
          description: Friend request rejected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /users/remove_friend/{user_id}/:
    post:
      tags:
        - Users
      summary: Remove friend
      description: Remove a friend from user's friends list
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of user to remove from friends
      responses:
        '200':
          description: Friend removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Failed to remove friend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /profile/profile/:
    get:
      tags:
        - Profile
      summary: Get user profile
      description: Get current user's profile information
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Failed to get profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /profile/profile/update/:
    post:
      tags:
        - Profile
      summary: Update user profile
      description: Update user profile information including avatar upload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar_base64:
                  type: string
                  description: Base64 encoded avatar image
                mime_type:
                  type: string
                  enum: [image/jpeg, image/png]
                  description: MIME type of the image
                gender:
                  type: string
                  enum: [male, female]
                location:
                  type: string
                bio:
                  type: string
                  maxLength: 500
                first_name:
                  type: string
                  maxLength: 50
                last_name:
                  type: string
                  maxLength: 50
                phone:
                  type: string
                  pattern: '^\d+$'
                  maxLength: 10
                street:
                  type: string
                  maxLength: 100
                country:
                  type: string
                  enum: [Singapore, Malaysia, Indonesia, Thailand, United States, Canada, United Kingdom, Australia]
                postal_code:
                  type: string
                  pattern: '^\d+$'
                  maxLength: 10
                dob:
                  type: string
                  format: date
                  description: Date of birth (YYYY-MM-DD)
                hobbies:
                  type: array
                  items:
                    type: string
                    enum: [Sport, Movie, Music, Travel]
                friend_info:
                  type: string
                  maxLength: 500
                music_preferences:
                  type: array
                  items:
                    type: string
                    enum: [Classical, Jazz, Pop, Rock, Rap, R&B, Techno]
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Profile update failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /auth/facebook/login/:
    post:
      tags:
        - Social Auth
      summary: Facebook login
      description: Login or register using Facebook access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fbAccessToken
              properties:
                fbAccessToken:
                  type: string
                  description: Facebook access token
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Login failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/google/login/:
    post:
      tags:
        - Social Auth
      summary: Google login
      description: Login or register using Google ID token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idToken
                - type
              properties:
                idToken:
                  type: string
                  description: Google ID token
                type:
                  type: string
                  enum: [web, app]
                  description: Type of Google client
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Login failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/facebook/link/:
    post:
      tags:
        - Social Auth
      summary: Link Facebook account
      description: Link Facebook account to existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fbAccessToken
              properties:
                fbAccessToken:
                  type: string
                  description: Facebook access token
      responses:
        '200':
          description: Account linked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        '400':
          description: Account linking failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/google/link/:
    post:
      tags:
        - Social Auth
      summary: Link Google account
      description: Link Google account to existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idToken
                - type
              properties:
                idToken:
                  type: string
                  description: Google ID token
                type:
                  type: string
                  enum: [web, app]
                  description: Type of Google client
      responses:
        '200':
          description: Account linked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        '400':
          description: Account linking failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deezer/track/{track_id}/:
    get:
      tags:
        - Deezer
      summary: Get Deezer track
      description: Get track information from Deezer API
      security: []
      parameters:
        - name: track_id
          in: path
          required: true
          schema:
            type: string
          description: Deezer track ID
      responses:
        '200':
          description: Track information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeezerTrack'
        '404':
          description: Track not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /deezer/search/:
    get:
      tags:
        - Deezer
      summary: Search Deezer tracks
      description: Search for tracks on Deezer
      security: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeezerTrack'
        '400':
          description: Search failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: Failed to fetch data from Deezer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tracks/search/:
    get:
      tags:
        - Tracks
      summary: Search tracks
      description: Search for tracks in the database
      security: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          description: Search query
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tracks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Track'

  /tracks/add_from_deezer/{track_id}/:
    post:
      tags:
        - Tracks
      summary: Add track from Deezer
      description: Add a track to the database from Deezer
      security: []
      parameters:
        - name: track_id
          in: path
          required: true
          schema:
            type: integer
          description: Deezer track ID
      responses:
        '200':
          description: Track already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '201':
          description: Track added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Track not found on Deezer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /playlists/playlists:
    post:
      tags:
        - Playlists
      summary: Create new playlist
      description: Create a new empty playlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Playlist name
                description:
                  type: string
                  description: Playlist description
                public:
                  type: boolean
                  description: Whether playlist is public
                  default: true
      responses:
        '201':
          description: Playlist created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  playlist_id:
                    type: integer
        '400':
          description: Playlist creation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /playlists/playlists/{playlist_id}:
    get:
      tags:
        - Playlists
      summary: Get playlist info
      description: Get playlist information and tracks
      parameters:
        - name: playlist_id
          in: path
          required: true
          schema:
            type: integer
          description: Playlist ID
      responses:
        '200':
          description: Playlist information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  playlist:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlaylistInfo'
        '404':
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /playlists/saved_playlists/:
    get:
      tags:
        - Playlists
      summary: Get user saved playlists
      description: Get all playlists saved by the user
      responses:
        '200':
          description: Saved playlists retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  playlists:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlaylistInfo'

  /playlists/public_playlists/:
    get:
      tags:
        - Playlists
      summary: Get public playlists
      description: Get all public playlists
      responses:
        '200':
          description: Public playlists retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  playlists:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlaylistInfo'

  /playlists/playlist/{playlist_id}/tracks/:
    get:
      tags:
        - Playlists
      summary: Get playlist tracks
      description: Get all tracks in a playlist
      parameters:
        - name: playlist_id
          in: path
          required: true
          schema:
            type: integer
          description: Playlist ID
      responses:
        '200':
          description: Playlist tracks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  playlist:
                    type: string
                  tracks:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlaylistTrack'

  /playlists/{playlist_id}/add/:
    post:
      tags:
        - Playlists
      summary: Add track to playlist
      description: Add a track to a playlist
      parameters:
        - name: playlist_id
          in: path
          required: true
          schema:
            type: integer
          description: Playlist ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - track_id
              properties:
                track_id:
                  type: string
                  description: Track ID or Deezer track ID
      responses:
        '201':
          description: Track added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  track_id:
                    type: integer
        '400':
          description: Failed to add track
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Playlist or track not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /playlists/{playlist_id}/move-track/:
    post:
      tags:
        - Playlists
      summary: Move track in playlist
      description: Reorder tracks in a playlist
      parameters:
        - name: playlist_id
          in: path
          required: true
          schema:
            type: integer
          description: Playlist ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - range_start
                - insert_before
              properties:
                range_start:
                  type: integer
                  description: Starting position of tracks to move
                insert_before:
                  type: integer
                  description: Position to insert tracks before
                range_length:
                  type: integer
                  description: Number of tracks to move
                  default: 1
      responses:
        '200':
          description: Tracks reordered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Failed to reorder tracks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /playlists/playlists/{playlist_id}/remove_tracks:
    post:
      tags:
        - Playlists
      summary: Remove track from playlist
      description: Remove a track from a playlist
      parameters:
        - name: playlist_id
          in: path
          required: true
          schema:
            type: integer
          description: Playlist ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - track_id
              properties:
                track_id:
                  type: integer
                  description: Playlist track ID to remove
      responses:
        '200':
          description: Track removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Failed to remove track
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Playlist or track not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /playlists/{playlist_id}/change-visibility/:
    post:
      tags:
        - Playlists
      summary: Change playlist visibility
      description: Change whether a playlist is public or private
      parameters:
        - name: playlist_id
          in: path
          required: true
          schema:
            type: integer
          description: Playlist ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                public:
                  type: boolean
                  description: Whether playlist should be public
      responses:
        '200':
          description: Playlist visibility changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Failed to change visibility
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /playlists/{playlist_id}/invite-user/:
    post:
      tags:
        - Playlists
      summary: Invite user to playlist
      description: Invite a user to access a playlist
      parameters:
        - name: playlist_id
          in: path
          required: true
          schema:
            type: integer
          description: Playlist ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: integer
                  description: ID of user to invite
      responses:
        '200':
          description: User already invited
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '201':
          description: User invited successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Failed to invite user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /playlists/{playlist_id}/license/:
    patch:
      tags:
        - Playlists
      summary: Update playlist license
      description: Update playlist access control settings
      parameters:
        - name: playlist_id
          in: path
          required: true
          schema:
            type: integer
          description: Playlist ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistLicense'
      responses:
        '200':
          description: Playlist license updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistLicense'
        '400':
          description: Invalid license data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /playlists/{playlist_id}/tracks/vote/:
    post:
      tags:
        - Playlists
      summary: Vote for track
      description: Vote for a track in a playlist (not yet implemented)
      parameters:
        - name: playlist_id
          in: path
          required: true
          schema:
            type: integer
          description: Playlist ID
      responses:
        '501':
          description: Vote API not implemented yet
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Vote API not implemented yet."

components:
  securitySchemes:
    TokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: 'Format: Token <your-token>'

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email

    Profile:
      type: object
      properties:
        id:
          type: integer
        user:
          type: integer
        gender:
          type: string
          enum: [male, female]
          nullable: true
        avatar:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
        postal_code:
          type: string
          nullable: true
        dob:
          type: string
          format: date
          nullable: true
        hobbies:
          type: array
          items:
            type: string
          nullable: true
        friend_info:
          type: string
          nullable: true
        music_preferences:
          type: array
          items:
            type: string
          nullable: true

    Track:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        artist:
          type: string
        album:
          type: string
        deezer_track_id:
          type: string
        url:
          type: string

    DeezerTrack:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        link:
          type: string
        duration:
          type: integer
        artist:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        album:
          type: object
          properties:
            id:
              type: integer
            title:
              type: string
            cover:
              type: string

    PlaylistInfo:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        playlist_name:
          type: string
        description:
          type: string
        public:
          type: boolean
        creator:
          type: string
        tracks:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              artist:
                type: string

    PlaylistTrack:
      type: object
      properties:
        track_id:
          type: integer
        deezer_track_id:
          type: string
        name:
          type: string
        position:
          type: integer

    PlaylistLicense:
      type: object
      properties:
        license_type:
          type: string
          enum: [open, invite_only, location_time]
          description: Type of playlist access control
        invited_users:
          type: array
          items:
            type: integer
          description: List of user IDs invited to the playlist
        vote_start_time:
          type: string
          format: time
          nullable: true
          description: Start time for voting (HH:MM:SS)
        vote_end_time:
          type: string
          format: time
          nullable: true
          description: End time for voting (HH:MM:SS)
        latitude:
          type: number
          format: float
          nullable: true
          description: Latitude for location-based access
        longitude:
          type: number
          format: float
          nullable: true
          description: Longitude for location-based access
        allowed_radius_meters:
          type: integer
          nullable: true
          description: Allowed radius in meters for location-based access
    Error:
      type: object
      properties:
        error:
          type: string
        detail:
          type: string
    ValidationError:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
tags:
  - name: Users
    description: User management and authentication
  - name: Profile
    description: User profile management
  - name: Social Auth
    description: Social media authentication (Facebook, Google)
  - name: Deezer
    description: Deezer music API integration
  - name: Tracks
    description: Track management
  - name: Playlists
    description: Playlist management and collaboration
