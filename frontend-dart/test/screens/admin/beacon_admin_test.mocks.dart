// Mocks generated by Mockito 5.4.6 from annotations
// in music_room/test/screens/admin/beacon_admin_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:music_room/providers/beacon_providers.dart' as _i2;
import 'package:music_room/services/beacon_services.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BeaconProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockBeaconProvider extends _i1.Mock implements _i2.BeaconProvider {
  MockBeaconProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.BeaconInfo> get discoveredBeacons =>
      (super.noSuchMethod(
            Invocation.getter(#discoveredBeacons),
            returnValue: <_i3.BeaconInfo>[],
          )
          as List<_i3.BeaconInfo>);

  @override
  bool get isScanning =>
      (super.noSuchMethod(Invocation.getter(#isScanning), returnValue: false)
          as bool);

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  List<_i3.BeaconInfo> get nearbyBeacons =>
      (super.noSuchMethod(
            Invocation.getter(#nearbyBeacons),
            returnValue: <_i3.BeaconInfo>[],
          )
          as List<_i3.BeaconInfo>);

  @override
  List<_i3.BeaconInfo> get immediateBeacons =>
      (super.noSuchMethod(
            Invocation.getter(#immediateBeacons),
            returnValue: <_i3.BeaconInfo>[],
          )
          as List<_i3.BeaconInfo>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasError =>
      (super.noSuchMethod(Invocation.getter(#hasError), returnValue: false)
          as bool);

  @override
  bool get hasSuccess =>
      (super.noSuchMethod(Invocation.getter(#hasSuccess), returnValue: false)
          as bool);

  @override
  bool get isReady =>
      (super.noSuchMethod(Invocation.getter(#isReady), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<bool> initializeBeacons() =>
      (super.noSuchMethod(
            Invocation.method(#initializeBeacons, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> startScanning({List<_i3.BeaconRegionConfig>? regions}) =>
      (super.noSuchMethod(
            Invocation.method(#startScanning, [], {#regions: regions}),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> stopScanning() =>
      (super.noSuchMethod(
            Invocation.method(#stopScanning, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> startMonitoringPlaylistRegion(String? playlistId) =>
      (super.noSuchMethod(
            Invocation.method(#startMonitoringPlaylistRegion, [playlistId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> stopMonitoring() =>
      (super.noSuchMethod(
            Invocation.method(#stopMonitoring, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i3.BeaconInfo? getBeaconForPlaylist(String? playlistId) =>
      (super.noSuchMethod(
            Invocation.method(#getBeaconForPlaylist, [playlistId]),
          )
          as _i3.BeaconInfo?);

  @override
  bool isUserNearPlaylist(String? playlistId) =>
      (super.noSuchMethod(
            Invocation.method(#isUserNearPlaylist, [playlistId]),
            returnValue: false,
          )
          as bool);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearMessages() => super.noSuchMethod(
    Invocation.method(#clearMessages, []),
    returnValueForMissingStub: null,
  );

  @override
  void setLoading(bool? loading) => super.noSuchMethod(
    Invocation.method(#setLoading, [loading]),
    returnValueForMissingStub: null,
  );

  @override
  void setError(String? error) => super.noSuchMethod(
    Invocation.method(#setError, [error]),
    returnValueForMissingStub: null,
  );

  @override
  void setSuccess(String? message) => super.noSuchMethod(
    Invocation.method(#setSuccess, [message]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<T?> executeAsync<T>(
    _i4.Future<T> Function()? operation, {
    String? successMessage,
    String? errorMessage,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #executeAsync,
              [operation],
              {#successMessage: successMessage, #errorMessage: errorMessage},
            ),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<bool> executeBool(
    _i4.Future<void> Function()? operation, {
    String? successMessage,
    String? errorMessage,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #executeBool,
              [operation],
              {#successMessage: successMessage, #errorMessage: errorMessage},
            ),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
